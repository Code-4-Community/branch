name: Terraform Plan on Changed Files

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      terraform-dirs: ${{ steps.set-dirs.outputs.dirs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.tf
            **/*.tfvars
            **/terraform.lock.hcl
            **/.terraform-version
          files_separator: "\n"
          files_yaml: |
            terraform:
              - '**/*.tf'
              - '**/*.tfvars'
              - '**/terraform.lock.hcl'
              - '**/.terraform-version'

      - name: List all changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Changed terraform files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Extract unique directories
        id: set-dirs
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Get unique directories containing changed terraform files
          dirs=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | \
            tr ' ' '\n' | \
            xargs -I {} dirname {} | \
            sort -u | \
            jq -R -s -c 'split("\n")[:-1]')

          echo "Unique directories with changes: $dirs"
          echo "dirs=$dirs" >> $GITHUB_OUTPUT

  terraform-process:
    needs: detect-changes
    if: needs.detect-changes.outputs.terraform-dirs != '' && needs.detect-changes.outputs.terraform-dirs != '[]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.terraform-dirs) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Install tfenv
        run: |
          git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
          echo "$HOME/.tfenv/bin" >> $GITHUB_PATH

      - name: Install terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Setup Terraform
        working-directory: ${{ matrix.directory }}
        run: |
          tfenv install
          terraform version

      - name: Format and Document
        id: fmt-docs
        working-directory: ${{ matrix.directory }}
        run: |
          # Format Terraform files
          echo "Formatting Terraform files"
          terraform fmt -recursive

          # Generate or update terraform-docs
          echo "Generating documentation"
          if [ -f "README.md" ]; then
            # Update existing README
            terraform-docs markdown table . --output-file README.md --output-mode inject
          else
            # Create new README using printf
            printf '# Terraform Module\n\n<!-- BEGIN_TF_DOCS -->\n<!-- END_TF_DOCS -->\n' > README.md
            terraform-docs markdown table . --output-file README.md --output-mode inject
          fi

          # Check if there are changes
          cd ${{ github.workspace }}
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            git diff --name-only
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ matrix.directory }}
        env:
          TF_VAR_infisical_client_id: ${{ secrets.INFISICAL_CLIENT_ID }}
          TF_VAR_infisical_client_secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ matrix.directory }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -out=tfplan > plan_output.txt 2>&1
          PLAN_EXIT_CODE=$?
          PLAN_OUTPUT=$(cat plan_output.txt)
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          exit $PLAN_EXIT_CODE
        working-directory: ${{ matrix.directory }}
        continue-on-error: true
        env:
          TF_VAR_infisical_client_id: ${{ secrets.INFISICAL_CLIENT_ID }}
          TF_VAR_infisical_client_secret: ${{ secrets.INFISICAL_CLIENT_SECRET }}

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
          FORMATTING_CHANGED: ${{ steps.fmt-docs.outputs.changed }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const formatNote = process.env.FORMATTING_CHANGED === 'true'
              ? '\n\n‚ö†Ô∏è **Note:** Formatting changes were detected. Please commit them to this PR.'
              : '';

            let output;
            if ('${{ steps.plan.outcome }}' === 'success') {
              output = `#### Terraform Process üìñ \`${{ matrix.directory }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`${formatNote}

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN || 'No plan output captured'}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            } else {
              output = `#### Terraform Plan Failed ‚ùå \`${{ matrix.directory }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`${formatNote}

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*

            Check the workflow logs for more details.`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  # Separate job to commit all formatting changes at once
  commit-changes:
    needs: [detect-changes, terraform-process]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Install tfenv and terraform-docs
        run: |
          git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
          echo "$HOME/.tfenv/bin" >> $GITHUB_PATH

          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Apply formatting to all directories
        run: |
          dirs='${{ needs.detect-changes.outputs.terraform-dirs }}'
          echo "$dirs" | jq -r '.[]' | while read -r dir; do
            echo "Processing directory: $dir"

            # Install correct Terraform version
            cd "$dir"
            tfenv install

            # Format Terraform files
            echo "Formatting Terraform files in $dir"
            terraform fmt -recursive

            # Generate or update terraform-docs
            echo "Generating documentation for $dir"
            if [ -f "README.md" ]; then
              terraform-docs markdown table . --output-file README.md --output-mode inject
            else
              printf '# Terraform Module\n\n<!-- BEGIN_TF_DOCS -->\n<!-- END_TF_DOCS -->\n' > README.md
              terraform-docs markdown table . --output-file README.md --output-mode inject
            fi

            cd - > /dev/null
          done

      - name: Check and commit changes
        run: |
          if git diff --quiet; then
            echo "No formatting changes needed"
          else
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"

            # Only add Terraform-related files
            git add "**/*.tf" "**/*.tfvars" "**/README.md" "**/.terraform-version" || true

            # Check if there are staged changes
            if git diff --staged --quiet; then
              echo "No Terraform files to commit"
            else
              git commit -m "chore: auto-format terraform and update documentation

              - Auto-formatted .tf files with terraform fmt
              - Updated README.md with terraform-docs

              Co-authored-by: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"

              git push
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary job to ensure all plans completed
  terraform-summary:
    needs: [detect-changes, terraform-process, commit-changes]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          if [ "${{ needs.detect-changes.outputs.terraform-dirs }}" == "" ] || [ "${{ needs.detect-changes.outputs.terraform-dirs }}" == "[]" ]; then
            echo "No Terraform changes detected"
          else
            echo "Terraform plan completed for directories: ${{ needs.detect-changes.outputs.terraform-dirs }}"
          fi
